<%- include('../partials/adminheader.ejs') %>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sales Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      integrity="sha512-P0JIsj/34gjdV7BR0SHVu7Da5vjj0v8hcoNiEzv0EqZ8VQdTVoYohXzN+v9jNQ5Vo6G29jURDopPpqRRH6hN2A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
        background-color: #f5f5f5;
      }
      h1 {
        text-align: center;
        color: #333;
      }
      .report-container {
        max-width: 800px;
        margin: 0 auto;
        background: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
      }
      .report-container > div {
        margin-bottom: 20px;
      }
      label {
        font-weight: bold;
        color: #333;
      }
      select,
      input[type="date"] {
        padding: 10px;
        margin-top: 5px;
        border-radius: 5px;
        border: 1px solid #ddd;
        width: calc(100% - 22px);
      }
      button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      button:hover {
        background-color: #0056b3;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th,
      td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
      }
      th {
        background-color: #76ac93;
      }
      tr:nth-child(even) {
        background-color: #f9f9f9;
      }
      .chart-container {
        position: relative;
        height: 400px;
      }
    </style>
  </head>
  <body>
    <div class="report-container">
      <h1>Sales Report</h1>
      <div style="display: flex; justify-content: flex-end; margin-top: 10px">
        <button onclick="downloadPDF()">
          <i class="fas fa-file-pdf"></i> Download PDF
        </button>
        <button onclick="downloadExcel()" style="margin-left: 10px">
          <i class="fas fa-file-excel"></i> Download Excel
        </button>
      </div>

      <div>
        <label for="reportType">Report Type:</label>
        <select id="reportType">
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
          <option value="custom">Custom Date Range</option>
        </select>
      </div>

      <div id="dateRange" style="display: none">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" />
      </div>

      <button onclick="generateReport()">
        <i class="fas fa-sync-alt"></i> Generate Report
      </button>

      <div class="chart-container">
        <canvas id="salesChart"></canvas>
      </div>

      <table id="reportTable">
        <thead>
          <tr>
            <th>Period</th>
            <th>Total Sales Count</th>
            <th>Total Order Amount</th>
            <th>Total Discounts</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <div class="report-container mt-4">
      <h2 style="text-align: center">Order Details</h2>
      <table id="detailedOrdersTable">
        <thead>
          <tr>
            <th>Order Date</th>
            <th>User Name</th>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Actual Price</th>
            <th>Discount</th>
            <th>Discounted Price</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <%- include('../partials/adminfooter.ejs') %>

    <script>
      const { jsPDF } = window.jspdf;
      let reportData = [];
      let salesChart;

      const reportTypeSelect = document.getElementById("reportType");
      const dateRangeDiv = document.getElementById("dateRange");

      reportTypeSelect.addEventListener("change", function () {
        dateRangeDiv.style.display = this.value === "custom" ? "block" : "none";
      });

      async function generateReport() {
        const reportType = document.getElementById("reportType").value;
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        let url = `/admin/sales-report-data?reportType=${reportType}`;
        if (reportType === "custom") {
          url += `&startDate=${startDate}&endDate=${endDate}`;
        }
        try {
          const response = await fetch(url);
          const data = await response.json();

          if (data.success) {
            displayReportTable(data.data);
            displayReportChart(data.data);
            displayDetailedOrdersTable(data.detailedOrders);
            reportData = data.data;
          } else {
            console.error("Error details:", data.error);
            console.error("Error stack:", data.stack);
            alert("Error generating report: " + data.message);
          }
        } catch (error) {
          console.error("Error:", error);
          alert("An error occurred while generating the report.");
        }
      }

      function displayDetailedOrdersTable(detailedOrders) {
        detailedOrders.sort(
          (a, b) => new Date(b.orderDate) - new Date(a.orderDate)
        );
        const tableBody = document.querySelector("#detailedOrdersTable tbody");
        tableBody.innerHTML = "";

        detailedOrders.forEach((order) => {
          const tr = document.createElement("tr");
          tr.innerHTML = `
                <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                <td>${order.userName}</td>
                <td>${order.productName}</td>
                <td>${order.quantity}</td>
                <td>${order.actualPrice.toFixed(2)}</td>
                <td>${order.discount.toFixed(2)}</td>
                <td>${order.discountedPrice.toFixed(2)}</td>
            `;
          tableBody.appendChild(tr);
        });
      }

      function downloadPDF() {
        const doc = new jsPDF();
        doc.setFontSize(16);
        doc.text("Sales Report", 90, 20);
        
        doc.setFontSize(10);
        const date = new Date()
        const dateString = date.toLocaleDateString()

        doc.text("Generated Date :"+ dateString,15,30)
        const tableData = reportData.map((row) => [
          row._id,
          row.totalSalesCount,
          row.totalOrderAmount.toFixed(2),
          row.totalDiscounts.toFixed(2),
        ]);

        doc.autoTable({
          head: [
            [
              "Period",
              "Total Sales Count",
              "Total Order Amount",
              "Total Discounts",
            ],
          ],
          body: tableData,
          startY: 35,
        });

        doc.addPage();
        doc.setFontSize(10);
        doc.text("Generated Date :"+ dateString,15,30)
        doc.setFontSize(16);
        doc.text("Detailed Orders", 90, 20);

        const detailedTableData = Array.from(
          document.querySelectorAll("#detailedOrdersTable tbody tr")
        ).map((row) => {
          return Array.from(row.cells).map((cell) => cell.textContent);
        });

        doc.autoTable({
          head: [
            [
              "Order Date",
              "User Name",
              "Product Name",
              "Quantity",
              "Actual Price",
              "Discount",
              "Discounted Price",
            ],
          ],
          body: detailedTableData,
          startY: 35,
        });

        doc.save("sales-report.pdf");
      }

      function downloadExcel() {
        const wb = XLSX.utils.book_new();

        const ws1 = XLSX.utils.json_to_sheet(
          reportData.map((row) => ({
            Period: row._id,
            "Total Sales Count": row.totalSalesCount,
            "Total Order Amount": row.totalOrderAmount.toFixed(2),
            "Total Discounts": row.totalDiscounts.toFixed(2),
          }))
        );
        XLSX.utils.book_append_sheet(wb, ws1, "Sales Report");

        const detailedOrders = Array.from(
          document.querySelectorAll("#detailedOrdersTable tbody tr")
        ).map((row) => {
          return {
            "Order Date": row.cells[0].textContent,
            "User Name": row.cells[1].textContent,
            "Product Name": row.cells[2].textContent,
            Quantity: row.cells[3].textContent,
            "Actual Price": row.cells[4].textContent,
            Discount: row.cells[5].textContent,
            "Discounted Price": row.cells[6].textContent,
          };
        });
        const ws2 = XLSX.utils.json_to_sheet(detailedOrders);
        XLSX.utils.book_append_sheet(wb, ws2, "Detailed Orders");

        XLSX.writeFile(wb, "sales-report.xlsx");
      }

      function displayReportTable(reportData) {
        reportData.sort((a, b) => new Date(b._id) - new Date(a._id));
        const tableBody = document.querySelector("#reportTable tbody");
        tableBody.innerHTML = "";

        reportData.forEach((row) => {
          const tr = document.createElement("tr");
          tr.innerHTML = `
                <td>${row._id}</td>
                <td>${row.totalSalesCount}</td>
                <td>${row.totalOrderAmount.toFixed(2)}</td>
                <td>${row.totalDiscounts.toFixed(2)}</td>
            `;
          tableBody.appendChild(tr);
        });
      }

      function displayReportChart(reportData) {
        const ctx = document.getElementById("salesChart").getContext("2d");

        if (salesChart) {
          salesChart.destroy();
        }

        salesChart = new Chart(ctx, {
          type: "bar",
          data: {
            labels: reportData.map((row) => row._id),
            datasets: [
              {
                label: "Total Order Amount",
                data: reportData.map((row) => row.totalOrderAmount),
                backgroundColor: "rgba(75, 192, 192, 0.6)",
              },
              {
                label: "Total Discounts",
                data: reportData.map((row) => row.totalDiscounts),
                backgroundColor: "rgba(255, 99, 132, 0.6)",
              },
            ],
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
              },
            },
          },
        });
      }
    </script>
  </body>
</html>
